Задача:
консольная утилита должна поддерживать поиск данных и отображение их в окне стандартного вывода по следующим критериям (аргументам командной строки):
—year_from и —year_to - фильтры на год создания (—year_from 2012) default = all
—brand - марка автомобиля (—brand NISSAN) default = all
—model - модель (—model X-TRAIL) default = all
—price_from и —price_to - фильтры на поле price_secondary, т.е. цену в долларах (—price_to 8000) default = all
—transmission - коробка передач (—transmission автомат) default = all
—mileage - максимальный допустимый пробег (—mileage 10000) default = all
—body - тип кузова автомобиля (—body универсал) default = all
—engine_from и —engine_to - объем двигателя ( —engine_from 1600 —engine_to 2000) default = all
—fuel - тип топлива (—fuel дизель) default = all
—exchange - готовность совершить обмен - yes|no (—exchange yes) default = all
—keywords - любой текст, который вы ищете в объявлении, независимые ключевые слова отделены запятыми (—keywords "одни руки, идеальное состояние, фаркоп") default = all
-max_records (default = 20) только значения больше 0. отрицательные значения меняем на дефолт. (added 20230404)

в дальнейшем мы похожие запросы будем делать, работая с базами данных на SQL или c применением других технологий (фреймворков, языков), например, spark, pandas

По факту это ваш первый ETL (в рамках этого тренинга, по крайней мере)
Экстрактим и обрабатываем данные из файлов csv, выгружаем в окно стандартного вывода. Можно легко перенаправить в текстовый файл
pandas - не использовать


data profiling:
card_id.id               - int
title.deal_type          - str ('продажа')
title.brand              - str
title.model              - str
title.restyling          - str ('Y', 'N', None)
price_primary            - tuple (value - int, money_code ('byn', 'usd', 'uah', 'rub')
price_secondary          - tuple (value - int, money_code ('byn', 'usd', 'uah', 'rub')
location.country         - str
location.city            - str
location.region          - str
labels                   - dic ['vin', 'Нна запчасти', 'аварийный', 'top']
comment                  - str
description.year         - int
description.transmission - str ('механика')
description.engine       - int (1.6 л -> 1600)
description.fuel         - str ('бензин')
description.mileage      - tuple (value - int, mileage_code ('km', 'mile') 
description.body         - str ('седан')
description.drive_type   - str ('передний привод', 'полный привод', 'постоянный полный привод', 'подключаемый полный привод')
description.color        - str ('серый')
exchange                 - str ('обмен не интересует')
scrap_date               - str
full_card                - str (title,price_primary,price_secondary,location,labels,comment,description,exchange,scrap_date)


result view:
1. title.brand, 
2. title.model, 
3. price_secondary (ord - 1 ASC), 
4. description.year (ord - 2 DESC), 
5. description.transmission, 
6. description.engine, 
7. description.mileage (ord - 3 ASC), 
8. description.body, 
9. description.fuel


Вопросы 20230404:
0. keywords в каких датасетах смотреть данные. (так как есть потенциальная инфа в датасете - card-options)
	20230404 - работаем только с датасетом - cards. 
1. параметр обязан принимать только один аргумент или несколько.
	20230404 - один параметр.
2. добавить параметр пробег - только максимальный или минимальный тоже.
	20230404 - остается как есть только максимальный допустимый пробег.
3. значения включая текущее значение или только больше/меньше.
	20230404 - включая значение из параметра.
4. добавить параметр кол-во фотографий, мин/макс/есть/нетфото.
	20230404 - работаем только с датасетом - cards, фотографии - пока не имплементировать.
5. добавить параметр ограничение кол-во строк для вывода (если да - какая сортировка для вывода)
	20230404 - сортировка по умолчанию - 1-й по увеличению цены, 2-й - по году выпуска - сначала более новые, 3-й - от меньшего километража к большему.
		     - параметр для вывода топ-N строк. -max_records (default = 20) только значения больше 0. отрицательные значения меняем на дефолт.
6. какие колонки выводить, и в каком формате, Header выводить - да.
	20230404 - табуляция для визуального восприятия, вывод - title.brand, title.model, price_secondary (в долларах только, всегда не пустая в данных), 
				description.year, description.transmission,	description.engine, description.mileage, description.body, description.fuel.
7. какие файлы надо забирать для парсинга - конретный/все из фолдера/переданный параметром.
	20230404 - работаем с текущим файлом.
8. распарсить весь файл и потом из него вытягивать данные по параметрам или сразу фильтровать строки по параметрам.
	20230404 - сразу фильтровать строки по параметрам после обработки токенов строки.
9. нужно ли хранить фото, опции для объявлений которых нет в основном датасете?
	остальные датасеты - джоинить как аля лефт джоин
	20230404 - пока нет.
10. хранить как словарь.
	20230404 - пока нет.
11. проверить уникальность по объявлениям (с помощью загрузки в БД для проверки ключевого поля, или пайтоном)
	20230404 - пока нет.
12. если какой-либо параметр не указан - параметр не использовать для фильтрации или дефолт?
	20230404 -  default = all (excluding -max_records)


20230406:
1. не всегда "comment" поле обернуто в кавычки, ожидается ли всегда что поля "title", "comment", "description" будут всегда обернуты в двойные кавычки?
	no, попробовать библиотеку csv
Notes:
	Будет выслан новый файл с новым лайаутом: location,labels,scrap_date


20230407:
1. Добавлено result view, и дата профайлинг data profiling


20230408:
1. табуляция для визуального восприятия клиента, done


20230412:
1. if __name__ == "__main__": main()     def main() should collect main functions
2. debug = 0   if debug != 0: print(time performance)
3. перенесены скрипты в папку get_cars(python)



To do:
1. Добавить функционал keywords чтобы можно было указывать один и больше слов через запятую
10. почитать про - generator - yeld
2. упростить код разбиения на токены и фильтрации
3. draw.io нарисовать схему работы пайтон утилиты. добавить пример 5 строк из сорс файла и распаршенных в словарях
4. рассмотреть вохможность разделения парсинга токенов и фильтрации
5. io.StringIO() - это надо совместим по интерфейсу с обычными файлами и можно csv reader настроить на этот поток в памяти
6. тоже лучше печатать с StringIO
7. В CSV файле, в строках с электромобилями в поле engine сейчас слово "электро", 
   а у машин с ДВС - объем двигателя. В поле fuel у электромобилей "запас хода...", 
   у машин с ДВС - тип топлива: бензин, дизель. Предлагаю для электромобилей в поле engine указывать объем 0, в поле fuel - "электро".
   тогда да, давайте
8. апдейтнуть логику для бренда = 'Lada (ВАЗ)' учесть часто повторяющиеся записи
9. Проинвестигировать возможность и целесообразность фильтровать первоочередно по параметрам которые не None либо переход при использовании StringIO
12. params.brand = params["brand"] - пересмотреть и привести к однообразию
13. проинвестигировать возможность распараллеливания функций на ядра
14. создать бенчмарк доку для измерения результатов работы программы
